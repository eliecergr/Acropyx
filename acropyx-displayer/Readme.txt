=== Install ===

------------ install node.js ------------------

follow : https://github.com/joyent/node/wiki/Installation
Shortcut for MacOS : 
	brew install node
	
------------ install node-dev ( optional )---------------------
For auto restarting node when sources have cahnged

follow : https://github.com/fgnass/node-dev

npm install -g node-dev

--- for debugging, install node-inspector   ( optional ) -------

npm install -g node-inspector


=== Develop ===

use TextMate for edition

Install dependencies

Run in the root directory :

>npm install

to start the server : 

Run in the root directory :

>node app.js
>node-dev app.js ( dev mode optional )

----- running test and covergage ----
1) install node-jscoverage
	npm install node-jscoverage
	sudo npm -g install node-jscoverage ( for global install )
2) run expresso
	2a) SIMPLE : expresso -I lib
	2b) WITH COVERGAE : expresso -I lib-cov
  
  
----- Final ------

Then go to:
	http://127.0.0.1:8181

--------- Folder info ---------

/lib
	: where to find node libraries
/locales
	: localized files for i18n support 
/node_modules
	: generated by npm install, local installation of required modules
/public
	: Contains all web public files ; scripts and 
/test
	: Contains tests file + scripts
/views 
	: Contains dynamic views used by jqtpl (JQuery Templates)

app.js 
	: Main file to start the server ( node app.js )
Readme.txt
	: This file
	
----------------- JSON RPC API --------------------

To test the display do:
	POST http://127.0.0.1:8080/navigate
		data: [InFlightSolo | InFlightTeam | ResultFlightSolo | ResultFlightTeam | ResultRun]

HTTP POST endpoint

/currentFlightSolo
    Content-Type : text/json
    SEE : test/navigate-inflight-solo.json
    
/currentFlightTeam
    Content-Type : text/json
    SEE : test/navigate-inflight-team.json
    
/resultFlightSolo
	Content-Type : text/json
    SEE : test/navigate-resultflight-solo.json
    
/resultFlightTeam
	Content-Type : text/json
    SEE : test/navigate-resultflight-team.json

/resultRun
	Content-Type : text/json
    SEE : test/navigate-result-run.json
    
/waiting
	Content-Type : text/json
    SEE : test/waiting.json
    
/paf
	Content-Type : text/json
	{
	    "text"  : "Text to display"
	   ,"style" : "StyleInfo"
	}
/pafclean
	Content-Type : ANY

------------------ Command line argument -------------
               -c
     --useCluster  Set this to allow multi-core cluster server.

               -h
           --help  Print this message and exit.

               -t
     --persistent  Set state persistence between restart.

           -b VAL
--bindAddress=VAL  Server bind address default 0.0.0.0.

           -p VAL
       --port=VAL  Server port, default 8181.

